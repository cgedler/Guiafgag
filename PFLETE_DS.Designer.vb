'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8806
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PFLETE_DS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PFLETE_DS
    Inherits Global.System.Data.DataSet
    
    Private tableVGuiaCompleta As VGuiaCompletaDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("VGuiaCompleta")) Is Nothing) Then
                MyBase.Tables.Add(New VGuiaCompletaDataTable(ds.Tables("VGuiaCompleta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VGuiaCompleta() As VGuiaCompletaDataTable
        Get
            Return Me.tableVGuiaCompleta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PFLETE_DS = CType(MyBase.Clone,PFLETE_DS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("VGuiaCompleta")) Is Nothing) Then
                MyBase.Tables.Add(New VGuiaCompletaDataTable(ds.Tables("VGuiaCompleta")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableVGuiaCompleta = CType(MyBase.Tables("VGuiaCompleta"),VGuiaCompletaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVGuiaCompleta) Is Nothing) Then
                Me.tableVGuiaCompleta.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PFLETE_DS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PFLETE_DS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableVGuiaCompleta = New VGuiaCompletaDataTable
        MyBase.Tables.Add(Me.tableVGuiaCompleta)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVGuiaCompleta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PFLETE_DS = New PFLETE_DS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub VGuiaCompletaRowChangeEventHandler(ByVal sender As Object, ByVal e As VGuiaCompletaRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VGuiaCompletaDataTable
        Inherits Global.System.Data.TypedTableBase(Of VGuiaCompletaRow)
        
        Private columnNombreEmpresa As Global.System.Data.DataColumn
        
        Private columnSucursal As Global.System.Data.DataColumn
        
        Private columnRifEmpresa As Global.System.Data.DataColumn
        
        Private columnNumGuia As Global.System.Data.DataColumn
        
        Private columnfact_num As Global.System.Data.DataColumn
        
        Private columnRecolecta As Global.System.Data.DataColumn
        
        Private columnRemitente As Global.System.Data.DataColumn
        
        Private columnDestinatario As Global.System.Data.DataColumn
        
        Private columnCondPago As Global.System.Data.DataColumn
        
        Private columnContenido As Global.System.Data.DataColumn
        
        Private columnChofer As Global.System.Data.DataColumn
        
        Private columnAyudante1 As Global.System.Data.DataColumn
        
        Private columnAyudante2 As Global.System.Data.DataColumn
        
        Private columnNombreCon As Global.System.Data.DataColumn
        
        Private columnCICon As Global.System.Data.DataColumn
        
        Private columnNotasCon As Global.System.Data.DataColumn
        
        Private columnco_zona As Global.System.Data.DataColumn
        
        Private columnzonas_des As Global.System.Data.DataColumn
        
        Private columnCantPaque As Global.System.Data.DataColumn
        
        Private columnPeso As Global.System.Data.DataColumn
        
        Private columnComision As Global.System.Data.DataColumn
        
        Private columnSeguro As Global.System.Data.DataColumn
        
        Private columnPorlamar As Global.System.Data.DataColumn
        
        Private columnSubTotal As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnFranqueo As Global.System.Data.DataColumn
        
        Private columnAdicionales As Global.System.Data.DataColumn
        
        Private columnMontoTotal As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        Private columnNumItem As Global.System.Data.DataColumn
        
        Private columnco_art As Global.System.Data.DataColumn
        
        Private columnart_des As Global.System.Data.DataColumn
        
        Private columnpeso_reng As Global.System.Data.DataColumn
        
        Private columniva_reng As Global.System.Data.DataColumn
        
        Private columnsubtotal_reng As Global.System.Data.DataColumn
        
        Private columnFpo As Global.System.Data.DataColumn
        
        Private columnComisionChof As Global.System.Data.DataColumn
        
        Private columnComisionOtrChof As Global.System.Data.DataColumn
        
        Private columnFacturara As Global.System.Data.DataColumn
        
        Private columnComisionChofFlete As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnDirecEmpresa As Global.System.Data.DataColumn
        
        Private columnDevFact As Global.System.Data.DataColumn
        
        Private columnObservacion As Global.System.Data.DataColumn
        
        Private columnDirecDest As Global.System.Data.DataColumn
        
        Private columnctrl_num As Global.System.Data.DataColumn
        
        Private columnComisionDevFact As Global.System.Data.DataColumn
        
        Private columnRecoleGuiaCarga As Global.System.Data.DataColumn
        
        Private columnTelefDest As Global.System.Data.DataColumn
        
        Private columnDespachada As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VGuiaCompleta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SucursalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSucursal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RifEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRifEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumGuiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumGuia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fact_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfact_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecolectaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecolecta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemitenteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemitente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DestinatarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDestinatario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CondPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCondPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContenidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContenido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChoferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChofer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ayudante1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudante1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Ayudante2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnAyudante2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreConColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CIConColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCICon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasConColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotasCon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property co_zonaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnco_zona
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property zonas_desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnzonas_des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantPaqueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantPaque
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeguroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeguro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorlamarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorlamar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FranqueoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFranqueo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdicionalesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdicionales
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MontoTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMontoTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property co_artColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnco_art
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property art_desColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnart_des
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property peso_rengColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeso_reng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property iva_rengColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniva_reng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtotal_rengColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtotal_reng
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FpoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFpo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionChofColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComisionChof
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionOtrChofColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComisionOtrChof
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturara
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionChofFleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComisionChofFlete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DirecEmpresaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDirecEmpresa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevFactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DirecDestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDirecDest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ctrl_numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnctrl_num
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionDevFactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComisionDevFact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecoleGuiaCargaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecoleGuiaCarga
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefDestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefDest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DespachadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDespachada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VGuiaCompletaRow
            Get
                Return CType(Me.Rows(index),VGuiaCompletaRow)
            End Get
        End Property
        
        Public Event VGuiaCompletaRowChanging As VGuiaCompletaRowChangeEventHandler
        
        Public Event VGuiaCompletaRowChanged As VGuiaCompletaRowChangeEventHandler
        
        Public Event VGuiaCompletaRowDeleting As VGuiaCompletaRowChangeEventHandler
        
        Public Event VGuiaCompletaRowDeleted As VGuiaCompletaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVGuiaCompletaRow(ByVal row As VGuiaCompletaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVGuiaCompletaRow( _
                    ByVal NombreEmpresa As String,  _
                    ByVal Sucursal As String,  _
                    ByVal RifEmpresa As String,  _
                    ByVal NumGuia As Integer,  _
                    ByVal fact_num As Integer,  _
                    ByVal Recolecta As Integer,  _
                    ByVal Remitente As String,  _
                    ByVal Destinatario As String,  _
                    ByVal CondPago As String,  _
                    ByVal Contenido As String,  _
                    ByVal Chofer As String,  _
                    ByVal Ayudante1 As String,  _
                    ByVal Ayudante2 As String,  _
                    ByVal NombreCon As String,  _
                    ByVal CICon As String,  _
                    ByVal NotasCon As String,  _
                    ByVal co_zona As String,  _
                    ByVal zonas_des As String,  _
                    ByVal CantPaque As Integer,  _
                    ByVal Peso As Decimal,  _
                    ByVal Comision As Decimal,  _
                    ByVal Seguro As Decimal,  _
                    ByVal Porlamar As Decimal,  _
                    ByVal SubTotal As Decimal,  _
                    ByVal IVA As Decimal,  _
                    ByVal Franqueo As Decimal,  _
                    ByVal Adicionales As Decimal,  _
                    ByVal MontoTotal As Decimal,  _
                    ByVal FECHA As Date,  _
                    ByVal NumItem As Short,  _
                    ByVal co_art As String,  _
                    ByVal art_des As String,  _
                    ByVal peso_reng As Decimal,  _
                    ByVal iva_reng As Decimal,  _
                    ByVal subtotal_reng As Decimal,  _
                    ByVal Fpo As Decimal,  _
                    ByVal ComisionChof As Decimal,  _
                    ByVal ComisionOtrChof As Decimal,  _
                    ByVal Facturara As String,  _
                    ByVal ComisionChofFlete As Decimal,  _
                    ByVal Cantidad As Integer,  _
                    ByVal DirecEmpresa As String,  _
                    ByVal DevFact As Boolean,  _
                    ByVal Observacion As String,  _
                    ByVal DirecDest As String,  _
                    ByVal ctrl_num As String,  _
                    ByVal ComisionDevFact As Decimal,  _
                    ByVal RecoleGuiaCarga As String,  _
                    ByVal TelefDest As String,  _
                    ByVal Despachada As Boolean) As VGuiaCompletaRow
            Dim rowVGuiaCompletaRow As VGuiaCompletaRow = CType(Me.NewRow,VGuiaCompletaRow)
            Dim columnValuesArray() As Object = New Object() {NombreEmpresa, Sucursal, RifEmpresa, NumGuia, fact_num, Recolecta, Remitente, Destinatario, CondPago, Contenido, Chofer, Ayudante1, Ayudante2, NombreCon, CICon, NotasCon, co_zona, zonas_des, CantPaque, Peso, Comision, Seguro, Porlamar, SubTotal, IVA, Franqueo, Adicionales, MontoTotal, FECHA, NumItem, co_art, art_des, peso_reng, iva_reng, subtotal_reng, Fpo, ComisionChof, ComisionOtrChof, Facturara, ComisionChofFlete, Cantidad, DirecEmpresa, DevFact, Observacion, DirecDest, ctrl_num, ComisionDevFact, RecoleGuiaCarga, TelefDest, Despachada}
            rowVGuiaCompletaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVGuiaCompletaRow)
            Return rowVGuiaCompletaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VGuiaCompletaDataTable = CType(MyBase.Clone,VGuiaCompletaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VGuiaCompletaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNombreEmpresa = MyBase.Columns("NombreEmpresa")
            Me.columnSucursal = MyBase.Columns("Sucursal")
            Me.columnRifEmpresa = MyBase.Columns("RifEmpresa")
            Me.columnNumGuia = MyBase.Columns("NumGuia")
            Me.columnfact_num = MyBase.Columns("fact_num")
            Me.columnRecolecta = MyBase.Columns("Recolecta")
            Me.columnRemitente = MyBase.Columns("Remitente")
            Me.columnDestinatario = MyBase.Columns("Destinatario")
            Me.columnCondPago = MyBase.Columns("CondPago")
            Me.columnContenido = MyBase.Columns("Contenido")
            Me.columnChofer = MyBase.Columns("Chofer")
            Me.columnAyudante1 = MyBase.Columns("Ayudante1")
            Me.columnAyudante2 = MyBase.Columns("Ayudante2")
            Me.columnNombreCon = MyBase.Columns("NombreCon")
            Me.columnCICon = MyBase.Columns("CICon")
            Me.columnNotasCon = MyBase.Columns("NotasCon")
            Me.columnco_zona = MyBase.Columns("co_zona")
            Me.columnzonas_des = MyBase.Columns("zonas_des")
            Me.columnCantPaque = MyBase.Columns("CantPaque")
            Me.columnPeso = MyBase.Columns("Peso")
            Me.columnComision = MyBase.Columns("Comision")
            Me.columnSeguro = MyBase.Columns("Seguro")
            Me.columnPorlamar = MyBase.Columns("Porlamar")
            Me.columnSubTotal = MyBase.Columns("SubTotal")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnFranqueo = MyBase.Columns("Franqueo")
            Me.columnAdicionales = MyBase.Columns("Adicionales")
            Me.columnMontoTotal = MyBase.Columns("MontoTotal")
            Me.columnFECHA = MyBase.Columns("FECHA")
            Me.columnNumItem = MyBase.Columns("NumItem")
            Me.columnco_art = MyBase.Columns("co_art")
            Me.columnart_des = MyBase.Columns("art_des")
            Me.columnpeso_reng = MyBase.Columns("peso_reng")
            Me.columniva_reng = MyBase.Columns("iva_reng")
            Me.columnsubtotal_reng = MyBase.Columns("subtotal_reng")
            Me.columnFpo = MyBase.Columns("Fpo")
            Me.columnComisionChof = MyBase.Columns("ComisionChof")
            Me.columnComisionOtrChof = MyBase.Columns("ComisionOtrChof")
            Me.columnFacturara = MyBase.Columns("Facturara")
            Me.columnComisionChofFlete = MyBase.Columns("ComisionChofFlete")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnDirecEmpresa = MyBase.Columns("DirecEmpresa")
            Me.columnDevFact = MyBase.Columns("DevFact")
            Me.columnObservacion = MyBase.Columns("Observacion")
            Me.columnDirecDest = MyBase.Columns("DirecDest")
            Me.columnctrl_num = MyBase.Columns("ctrl_num")
            Me.columnComisionDevFact = MyBase.Columns("ComisionDevFact")
            Me.columnRecoleGuiaCarga = MyBase.Columns("RecoleGuiaCarga")
            Me.columnTelefDest = MyBase.Columns("TelefDest")
            Me.columnDespachada = MyBase.Columns("Despachada")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNombreEmpresa = New Global.System.Data.DataColumn("NombreEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEmpresa)
            Me.columnSucursal = New Global.System.Data.DataColumn("Sucursal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSucursal)
            Me.columnRifEmpresa = New Global.System.Data.DataColumn("RifEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRifEmpresa)
            Me.columnNumGuia = New Global.System.Data.DataColumn("NumGuia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumGuia)
            Me.columnfact_num = New Global.System.Data.DataColumn("fact_num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfact_num)
            Me.columnRecolecta = New Global.System.Data.DataColumn("Recolecta", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecolecta)
            Me.columnRemitente = New Global.System.Data.DataColumn("Remitente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemitente)
            Me.columnDestinatario = New Global.System.Data.DataColumn("Destinatario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDestinatario)
            Me.columnCondPago = New Global.System.Data.DataColumn("CondPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondPago)
            Me.columnContenido = New Global.System.Data.DataColumn("Contenido", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContenido)
            Me.columnChofer = New Global.System.Data.DataColumn("Chofer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChofer)
            Me.columnAyudante1 = New Global.System.Data.DataColumn("Ayudante1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudante1)
            Me.columnAyudante2 = New Global.System.Data.DataColumn("Ayudante2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAyudante2)
            Me.columnNombreCon = New Global.System.Data.DataColumn("NombreCon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCon)
            Me.columnCICon = New Global.System.Data.DataColumn("CICon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCICon)
            Me.columnNotasCon = New Global.System.Data.DataColumn("NotasCon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotasCon)
            Me.columnco_zona = New Global.System.Data.DataColumn("co_zona", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnco_zona)
            Me.columnzonas_des = New Global.System.Data.DataColumn("zonas_des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnzonas_des)
            Me.columnCantPaque = New Global.System.Data.DataColumn("CantPaque", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantPaque)
            Me.columnPeso = New Global.System.Data.DataColumn("Peso", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeso)
            Me.columnComision = New Global.System.Data.DataColumn("Comision", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComision)
            Me.columnSeguro = New Global.System.Data.DataColumn("Seguro", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeguro)
            Me.columnPorlamar = New Global.System.Data.DataColumn("Porlamar", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorlamar)
            Me.columnSubTotal = New Global.System.Data.DataColumn("SubTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotal)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnFranqueo = New Global.System.Data.DataColumn("Franqueo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFranqueo)
            Me.columnAdicionales = New Global.System.Data.DataColumn("Adicionales", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdicionales)
            Me.columnMontoTotal = New Global.System.Data.DataColumn("MontoTotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMontoTotal)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
            Me.columnNumItem = New Global.System.Data.DataColumn("NumItem", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumItem)
            Me.columnco_art = New Global.System.Data.DataColumn("co_art", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnco_art)
            Me.columnart_des = New Global.System.Data.DataColumn("art_des", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnart_des)
            Me.columnpeso_reng = New Global.System.Data.DataColumn("peso_reng", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeso_reng)
            Me.columniva_reng = New Global.System.Data.DataColumn("iva_reng", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniva_reng)
            Me.columnsubtotal_reng = New Global.System.Data.DataColumn("subtotal_reng", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtotal_reng)
            Me.columnFpo = New Global.System.Data.DataColumn("Fpo", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFpo)
            Me.columnComisionChof = New Global.System.Data.DataColumn("ComisionChof", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComisionChof)
            Me.columnComisionOtrChof = New Global.System.Data.DataColumn("ComisionOtrChof", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComisionOtrChof)
            Me.columnFacturara = New Global.System.Data.DataColumn("Facturara", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturara)
            Me.columnComisionChofFlete = New Global.System.Data.DataColumn("ComisionChofFlete", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComisionChofFlete)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnDirecEmpresa = New Global.System.Data.DataColumn("DirecEmpresa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDirecEmpresa)
            Me.columnDevFact = New Global.System.Data.DataColumn("DevFact", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevFact)
            Me.columnObservacion = New Global.System.Data.DataColumn("Observacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservacion)
            Me.columnDirecDest = New Global.System.Data.DataColumn("DirecDest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDirecDest)
            Me.columnctrl_num = New Global.System.Data.DataColumn("ctrl_num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnctrl_num)
            Me.columnComisionDevFact = New Global.System.Data.DataColumn("ComisionDevFact", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComisionDevFact)
            Me.columnRecoleGuiaCarga = New Global.System.Data.DataColumn("RecoleGuiaCarga", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecoleGuiaCarga)
            Me.columnTelefDest = New Global.System.Data.DataColumn("TelefDest", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefDest)
            Me.columnDespachada = New Global.System.Data.DataColumn("Despachada", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDespachada)
            Me.columnNombreEmpresa.MaxLength = 50
            Me.columnSucursal.MaxLength = 50
            Me.columnRifEmpresa.MaxLength = 50
            Me.columnRemitente.MaxLength = 150
            Me.columnDestinatario.MaxLength = 150
            Me.columnCondPago.MaxLength = 150
            Me.columnContenido.MaxLength = 150
            Me.columnChofer.MaxLength = 150
            Me.columnAyudante1.MaxLength = 150
            Me.columnAyudante2.MaxLength = 150
            Me.columnNombreCon.MaxLength = 150
            Me.columnCICon.MaxLength = 150
            Me.columnNotasCon.MaxLength = 2147483647
            Me.columnco_zona.MaxLength = 7
            Me.columnzonas_des.MaxLength = 150
            Me.columnco_art.MaxLength = 3
            Me.columnart_des.MaxLength = 150
            Me.columnFacturara.MaxLength = 20
            Me.columnDirecEmpresa.MaxLength = 2147483647
            Me.columnObservacion.MaxLength = 2147483647
            Me.columnDirecDest.MaxLength = 2147483647
            Me.columnctrl_num.MaxLength = 20
            Me.columnRecoleGuiaCarga.MaxLength = 8
            Me.columnTelefDest.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVGuiaCompletaRow() As VGuiaCompletaRow
            Return CType(Me.NewRow,VGuiaCompletaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VGuiaCompletaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VGuiaCompletaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VGuiaCompletaRowChangedEvent) Is Nothing) Then
                RaiseEvent VGuiaCompletaRowChanged(Me, New VGuiaCompletaRowChangeEvent(CType(e.Row,VGuiaCompletaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VGuiaCompletaRowChangingEvent) Is Nothing) Then
                RaiseEvent VGuiaCompletaRowChanging(Me, New VGuiaCompletaRowChangeEvent(CType(e.Row,VGuiaCompletaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VGuiaCompletaRowDeletedEvent) Is Nothing) Then
                RaiseEvent VGuiaCompletaRowDeleted(Me, New VGuiaCompletaRowChangeEvent(CType(e.Row,VGuiaCompletaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VGuiaCompletaRowDeletingEvent) Is Nothing) Then
                RaiseEvent VGuiaCompletaRowDeleting(Me, New VGuiaCompletaRowChangeEvent(CType(e.Row,VGuiaCompletaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVGuiaCompletaRow(ByVal row As VGuiaCompletaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PFLETE_DS = New PFLETE_DS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VGuiaCompletaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VGuiaCompletaRow
        Inherits Global.System.Data.DataRow
        
        Private tableVGuiaCompleta As VGuiaCompletaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVGuiaCompleta = CType(Me.Table,VGuiaCompletaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.NombreEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreEmpresa' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.NombreEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sucursal() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.SucursalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sucursal' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.SucursalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RifEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.RifEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RifEmpresa' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.RifEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumGuia() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.NumGuiaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumGuia' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.NumGuiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fact_num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.fact_numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fact_num' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.fact_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Recolecta() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.RecolectaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Recolecta' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.RecolectaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remitente() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.RemitenteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Remitente' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.RemitenteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Destinatario() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.DestinatarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Destinatario' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.DestinatarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CondPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.CondPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CondPago' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.CondPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contenido() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ContenidoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Contenido' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ContenidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Chofer() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ChoferColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Chofer' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ChoferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ayudante1() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.Ayudante1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ayudante1' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.Ayudante1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ayudante2() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.Ayudante2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ayudante2' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.Ayudante2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.NombreConColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCon' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.NombreConColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CICon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.CIConColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CICon' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.CIConColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NotasCon() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.NotasConColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NotasCon' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.NotasConColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property co_zona() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.co_zonaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'co_zona' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.co_zonaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property zonas_des() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.zonas_desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'zonas_des' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.zonas_desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantPaque() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.CantPaqueColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantPaque' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.CantPaqueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Peso() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.PesoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Peso' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.PesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comision() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ComisionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Comision' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Seguro() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.SeguroColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Seguro' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.SeguroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porlamar() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.PorlamarColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Porlamar' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.PorlamarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.SubTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubTotal' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.SubTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.IVAColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVA' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Franqueo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.FranqueoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Franqueo' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.FranqueoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adicionales() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.AdicionalesColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adicionales' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.AdicionalesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MontoTotal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.MontoTotalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MontoTotal' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.MontoTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As Date
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.FECHAColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumItem() As Short
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.NumItemColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumItem' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.NumItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property co_art() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.co_artColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'co_art' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.co_artColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property art_des() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.art_desColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'art_des' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.art_desColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property peso_reng() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.peso_rengColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'peso_reng' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.peso_rengColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property iva_reng() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.iva_rengColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'iva_reng' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.iva_rengColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtotal_reng() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.subtotal_rengColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subtotal_reng' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.subtotal_rengColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fpo() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.FpoColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fpo' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.FpoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComisionChof() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ComisionChofColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComisionChof' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ComisionChofColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComisionOtrChof() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ComisionOtrChofColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComisionOtrChof' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ComisionOtrChofColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturara() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.FacturaraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Facturara' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.FacturaraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComisionChofFlete() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ComisionChofFleteColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComisionChofFlete' de la tabla 'VGuiaCompleta' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ComisionChofFleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.CantidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DirecEmpresa() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.DirecEmpresaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DirecEmpresa' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.DirecEmpresaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DevFact() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.DevFactColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DevFact' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.DevFactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ObservacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Observacion' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ObservacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DirecDest() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.DirecDestColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DirecDest' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.DirecDestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ctrl_num() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ctrl_numColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ctrl_num' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ctrl_numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComisionDevFact() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.ComisionDevFactColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ComisionDevFact' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.ComisionDevFactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecoleGuiaCarga() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.RecoleGuiaCargaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RecoleGuiaCarga' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.RecoleGuiaCargaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefDest() As String
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.TelefDestColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TelefDest' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.TelefDestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Despachada() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableVGuiaCompleta.DespachadaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Despachada' de la tabla 'VGuiaCompleta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVGuiaCompleta.DespachadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.NombreEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmpresaNull()
            Me(Me.tableVGuiaCompleta.NombreEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSucursalNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.SucursalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSucursalNull()
            Me(Me.tableVGuiaCompleta.SucursalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRifEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.RifEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRifEmpresaNull()
            Me(Me.tableVGuiaCompleta.RifEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumGuiaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.NumGuiaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumGuiaNull()
            Me(Me.tableVGuiaCompleta.NumGuiaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfact_numNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.fact_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfact_numNull()
            Me(Me.tableVGuiaCompleta.fact_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecolectaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.RecolectaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecolectaNull()
            Me(Me.tableVGuiaCompleta.RecolectaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemitenteNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.RemitenteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemitenteNull()
            Me(Me.tableVGuiaCompleta.RemitenteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDestinatarioNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.DestinatarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDestinatarioNull()
            Me(Me.tableVGuiaCompleta.DestinatarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCondPagoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.CondPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCondPagoNull()
            Me(Me.tableVGuiaCompleta.CondPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContenidoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ContenidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContenidoNull()
            Me(Me.tableVGuiaCompleta.ContenidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChoferNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ChoferColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChoferNull()
            Me(Me.tableVGuiaCompleta.ChoferColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudante1Null() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.Ayudante1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudante1Null()
            Me(Me.tableVGuiaCompleta.Ayudante1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAyudante2Null() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.Ayudante2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAyudante2Null()
            Me(Me.tableVGuiaCompleta.Ayudante2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreConNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.NombreConColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreConNull()
            Me(Me.tableVGuiaCompleta.NombreConColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCIConNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.CIConColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCIConNull()
            Me(Me.tableVGuiaCompleta.CIConColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasConNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.NotasConColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasConNull()
            Me(Me.tableVGuiaCompleta.NotasConColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isco_zonaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.co_zonaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setco_zonaNull()
            Me(Me.tableVGuiaCompleta.co_zonaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iszonas_desNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.zonas_desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setzonas_desNull()
            Me(Me.tableVGuiaCompleta.zonas_desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantPaqueNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.CantPaqueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantPaqueNull()
            Me(Me.tableVGuiaCompleta.CantPaqueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPesoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.PesoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPesoNull()
            Me(Me.tableVGuiaCompleta.PesoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNull()
            Me(Me.tableVGuiaCompleta.ComisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeguroNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.SeguroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeguroNull()
            Me(Me.tableVGuiaCompleta.SeguroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorlamarNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.PorlamarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorlamarNull()
            Me(Me.tableVGuiaCompleta.PorlamarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.SubTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalNull()
            Me(Me.tableVGuiaCompleta.SubTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tableVGuiaCompleta.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFranqueoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.FranqueoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFranqueoNull()
            Me(Me.tableVGuiaCompleta.FranqueoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdicionalesNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.AdicionalesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdicionalesNull()
            Me(Me.tableVGuiaCompleta.AdicionalesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMontoTotalNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.MontoTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMontoTotalNull()
            Me(Me.tableVGuiaCompleta.MontoTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableVGuiaCompleta.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumItemNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.NumItemColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumItemNull()
            Me(Me.tableVGuiaCompleta.NumItemColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isco_artNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.co_artColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setco_artNull()
            Me(Me.tableVGuiaCompleta.co_artColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isart_desNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.art_desColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setart_desNull()
            Me(Me.tableVGuiaCompleta.art_desColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ispeso_rengNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.peso_rengColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setpeso_rengNull()
            Me(Me.tableVGuiaCompleta.peso_rengColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isiva_rengNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.iva_rengColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setiva_rengNull()
            Me(Me.tableVGuiaCompleta.iva_rengColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Issubtotal_rengNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.subtotal_rengColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setsubtotal_rengNull()
            Me(Me.tableVGuiaCompleta.subtotal_rengColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFpoNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.FpoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFpoNull()
            Me(Me.tableVGuiaCompleta.FpoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionChofNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ComisionChofColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionChofNull()
            Me(Me.tableVGuiaCompleta.ComisionChofColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionOtrChofNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ComisionOtrChofColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionOtrChofNull()
            Me(Me.tableVGuiaCompleta.ComisionOtrChofColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaraNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.FacturaraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaraNull()
            Me(Me.tableVGuiaCompleta.FacturaraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionChofFleteNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ComisionChofFleteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionChofFleteNull()
            Me(Me.tableVGuiaCompleta.ComisionChofFleteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tableVGuiaCompleta.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDirecEmpresaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.DirecEmpresaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDirecEmpresaNull()
            Me(Me.tableVGuiaCompleta.DirecEmpresaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDevFactNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.DevFactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDevFactNull()
            Me(Me.tableVGuiaCompleta.DevFactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ObservacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionNull()
            Me(Me.tableVGuiaCompleta.ObservacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDirecDestNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.DirecDestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDirecDestNull()
            Me(Me.tableVGuiaCompleta.DirecDestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isctrl_numNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ctrl_numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setctrl_numNull()
            Me(Me.tableVGuiaCompleta.ctrl_numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionDevFactNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.ComisionDevFactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionDevFactNull()
            Me(Me.tableVGuiaCompleta.ComisionDevFactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecoleGuiaCargaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.RecoleGuiaCargaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecoleGuiaCargaNull()
            Me(Me.tableVGuiaCompleta.RecoleGuiaCargaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefDestNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.TelefDestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefDestNull()
            Me(Me.tableVGuiaCompleta.TelefDestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDespachadaNull() As Boolean
            Return Me.IsNull(Me.tableVGuiaCompleta.DespachadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDespachadaNull()
            Me(Me.tableVGuiaCompleta.DespachadaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VGuiaCompletaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VGuiaCompletaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VGuiaCompletaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VGuiaCompletaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PFLETE_DSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VGuiaCompletaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "VGuiaCompleta"
            tableMapping.ColumnMappings.Add("NombreEmpresa", "NombreEmpresa")
            tableMapping.ColumnMappings.Add("Sucursal", "Sucursal")
            tableMapping.ColumnMappings.Add("RifEmpresa", "RifEmpresa")
            tableMapping.ColumnMappings.Add("NumGuia", "NumGuia")
            tableMapping.ColumnMappings.Add("fact_num", "fact_num")
            tableMapping.ColumnMappings.Add("Recolecta", "Recolecta")
            tableMapping.ColumnMappings.Add("Remitente", "Remitente")
            tableMapping.ColumnMappings.Add("Destinatario", "Destinatario")
            tableMapping.ColumnMappings.Add("CondPago", "CondPago")
            tableMapping.ColumnMappings.Add("Contenido", "Contenido")
            tableMapping.ColumnMappings.Add("Chofer", "Chofer")
            tableMapping.ColumnMappings.Add("Ayudante1", "Ayudante1")
            tableMapping.ColumnMappings.Add("Ayudante2", "Ayudante2")
            tableMapping.ColumnMappings.Add("NombreCon", "NombreCon")
            tableMapping.ColumnMappings.Add("CICon", "CICon")
            tableMapping.ColumnMappings.Add("NotasCon", "NotasCon")
            tableMapping.ColumnMappings.Add("co_zona", "co_zona")
            tableMapping.ColumnMappings.Add("zonas_des", "zonas_des")
            tableMapping.ColumnMappings.Add("CantPaque", "CantPaque")
            tableMapping.ColumnMappings.Add("Peso", "Peso")
            tableMapping.ColumnMappings.Add("Comision", "Comision")
            tableMapping.ColumnMappings.Add("Seguro", "Seguro")
            tableMapping.ColumnMappings.Add("Porlamar", "Porlamar")
            tableMapping.ColumnMappings.Add("SubTotal", "SubTotal")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("Franqueo", "Franqueo")
            tableMapping.ColumnMappings.Add("Adicionales", "Adicionales")
            tableMapping.ColumnMappings.Add("MontoTotal", "MontoTotal")
            tableMapping.ColumnMappings.Add("FECHA", "FECHA")
            tableMapping.ColumnMappings.Add("NumItem", "NumItem")
            tableMapping.ColumnMappings.Add("co_art", "co_art")
            tableMapping.ColumnMappings.Add("art_des", "art_des")
            tableMapping.ColumnMappings.Add("peso_reng", "peso_reng")
            tableMapping.ColumnMappings.Add("iva_reng", "iva_reng")
            tableMapping.ColumnMappings.Add("subtotal_reng", "subtotal_reng")
            tableMapping.ColumnMappings.Add("Fpo", "Fpo")
            tableMapping.ColumnMappings.Add("ComisionChof", "ComisionChof")
            tableMapping.ColumnMappings.Add("ComisionOtrChof", "ComisionOtrChof")
            tableMapping.ColumnMappings.Add("Facturara", "Facturara")
            tableMapping.ColumnMappings.Add("ComisionChofFlete", "ComisionChofFlete")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("DirecEmpresa", "DirecEmpresa")
            tableMapping.ColumnMappings.Add("DevFact", "DevFact")
            tableMapping.ColumnMappings.Add("Observacion", "Observacion")
            tableMapping.ColumnMappings.Add("DirecDest", "DirecDest")
            tableMapping.ColumnMappings.Add("ctrl_num", "ctrl_num")
            tableMapping.ColumnMappings.Add("ComisionDevFact", "ComisionDevFact")
            tableMapping.ColumnMappings.Add("RecoleGuiaCarga", "RecoleGuiaCarga")
            tableMapping.ColumnMappings.Add("TelefDest", "TelefDest")
            tableMapping.ColumnMappings.Add("Despachada", "Despachada")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.GuiaFletesGAG.My.MySettings.Default.PFLETEConnStr
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        NombreEmpresa, Sucursal, RifEmpresa, NumGuia, fact_num, Recolecta, "& _ 
                "Remitente, Destinatario, CondPago, Contenido, Chofer, Ayudante1, Ayudante2, Nomb"& _ 
                "reCon, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CICon, NotasCon, co_zona, zonas_des, CantPaque"& _ 
                ", Peso, Comision, Seguro, Porlamar, SubTotal, IVA, Franqueo, Adicionales, MontoT"& _ 
                "otal, FECHA, NumItem, co_art, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         art_des, peso_reng, iva"& _ 
                "_reng, Fpo, subtotal_reng, ComisionChof, ComisionOtrChof, Facturara, ComisionCho"& _ 
                "fFlete, Cantidad, DirecEmpresa, DevFact, Observacion, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                        "& _ 
                " DirecDest, ctrl_num, ComisionDevFact, RecoleGuiaCarga, TelefDest, Despachada"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"F"& _ 
                "ROM            VGuiaCompleta"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PFLETE_DS.VGuiaCompletaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As PFLETE_DS.VGuiaCompletaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As PFLETE_DS.VGuiaCompletaDataTable = New PFLETE_DS.VGuiaCompletaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As PFLETE_DS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As PFLETE_DS, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As PFLETE_DS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As PFLETE_DS) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda"& _ 
                        "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co"& _ 
                        "n las transacciones o el estado actual no permite que comience la transacción.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
